#!/usr/bin/env ruby

COMPRESSOR = "uglifyjs -nc"

def doit!
  scripts_partial_path = ARGV[0]
  destination = ARGV[1]
  compressed_scripts = ''

  unless scripts_partial_path
    abort("usage: #{$0} <scripts_partial_path> [<destination>]\nexample: #{$0} templates/partials/scripts.html production")
  end

  scripts_partial_content = begin
    File.read(scripts_partial_path)
  rescue Exception
    abort("error: cannot read the file '#{scripts_partial_path}'")
  end

  script_paths = scripts_partial_content.scan(/<script +src=['"]([^'"]+)['"]>/).flatten
  translated_script_paths = translate_script_paths(script_paths)

  translated_script_paths.each_with_index do |script_path, i|
    compressor_output = `#{COMPRESSOR} #{script_path} 2> /dev/null`
    compressed_scripts << if $?.exitstatus == 0
      compressor_output << "\n\n"
    else
      abort("error: cannot find the corresponding file for '#{script_paths[i]}'")
    end
  end

  compressed_scripts_file = "#{Time.now.to_i}.min.js"
  fd = File.open("_attachments/#{compressed_scripts_file}", "w")
  fd.write(compressed_scripts)
  fd.close

  fd = File.open(scripts_partial_path, "w")
  fd.write("<script src=\"../../#{compressed_scripts_file}\"></script>")
  fd.close

  if destination
    `couchapp push #{destination}`
  else
    `couchapp push`
  end

  # restore
  fd = File.open(scripts_partial_path, "w")
  fd.write(scripts_partial_content)
  fd.close

  # and clean up
  File.delete("_attachments/#{compressed_scripts_file}")
end

def translate_script_paths(scripts)
  scripts.map do |script|
    vendor_regex = /^\.\.\/\.\.\/vendor\/([^\/]+)\/(.+)$/
    script = if script.match(vendor_regex)
      script.gsub(vendor_regex, 'vendor/\1/_attachments/\2')
    else
      script.gsub(/^\.\.\/\.\.\/(.+)$/, '_attachments/\1')
    end
  end
end

doit!
